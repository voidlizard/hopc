
FIXME:
===================================================================================================
dmz@x201:~/prj/hop$ cat  t/sloop3.hop 

($ ccall "display" :string :unit $)
($ ccall "sleep"   :int :unit $)

(define (pysh) (display "PYSH-PYSH"))

(define (main)
    (display "PREVED")
    (pysh)
    (sleep 1)
    (pysh)
    (let (q pysh) (q))
    (pysh)
)

(main)

(letrec ((fun_pysh_2 (func () (let ((_tmp3_4 "PYSH-PYSH"))
                                 (apply-direct display _tmp3_4))))
         (fun_main_3 (func (pysh_2) (letrec ((_tmp4_5 (let ((_tmp5_10 "PREVED")) ;; FIXME: REMOVE UNNESESSARY FREE VAR AFTER CALL CONV
                                                         (apply-direct display _tmp5_10)))
                                             (_tmp6_6 (apply-direct fun_pysh_2))
                                             (_tmp7_7 (let ((_tmp8_11 1))
                                                         (apply-direct sleep _tmp8_11)))
                                             (_tmp9_8 (apply-direct fun_pysh_2))
                                             (_tmp10_9 (apply-direct fun_pysh_2)))
                                       (apply-direct fun_pysh_2))))
         (pysh_2 (make-closure fun_pysh_2))
         (main_3 (make-closure fun_main_3 pysh_2)))
   (apply-closure main_3))

===================================================================================================

FIXME: взаимная рекурсия опять

cat t/trec1.hop 

(define (boo x) (display x) (hoo x))

(define (hoo a) (boo 22))


(boo 16)

--- уничтожилась hoo т.к использование переменной смотрится вниз, а не вверх


(letrec ((fun_boo_0 (func (x_2 display
                           hoo_1) (letrec ((_tmp0_3 (apply-closure display x_2)))
                                     (apply-closure hoo_1 x_2))))
         (boo_0 (make-closure fun_boo_0 display hoo_1)))
   (let ((_tmp7_8 16))
      (apply-closure boo_0 _tmp7_8)))


---

L0:                                        ; fun_boo_0
          call r5                          ; call-closure
          mov r1 r5                        ; ret. val.
          call r6                          ; call-closure
          mov r1 r6                        ; ret. val.
          ret                              ; ret

          nop                              ; make-closure
          mov r5 r4                        ; fun_boo_0
          const 16 r6                      ; 16 -> _tmp7_8
          call r4                          ; call-closure
          mov r1 r4                        ; ret. val.



