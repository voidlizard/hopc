
TopLevel. TopLevel ::= [Exp] ;

EUnit.   Exp ::= O C ;
EStr.    Exp ::= String  ;
EInt.    Exp ::= Integer ;
EAtom.   Exp ::= AtomT ;
-- EList.   Exp ::= QuoT O [Exp] C;
ELet.    Exp ::= O "let" O AtomT Exp C Exp C;
ELetM.   Exp ::= O "let" O [Bind] C Exp C ;
ELambda. Exp ::= O "lambda" O [AtomT] C Exp C;
EApply.  Exp ::= O Exp [Exp] C;
EBegin.  Exp ::= O "begin" [Exp] C;
ECond.   Exp ::= O "if" Exp Exp Exp C;

EMacroT.   Exp ::=  O "$" "typeof"   AtomT TType "$" C;
EMacroFrn. Exp ::=  O "$" "foreign"  String AtomT TTypeFun "$" C;
EMacroFrnP. Exp ::= O "$" "foreign" "pure" String AtomT TTypeFun "$" C;

EBind.   Bind ::= O AtomT Exp C;
EDef.    Exp  ::= Def;

DefExp.  Def ::= O "define" AtomT Exp C;
DeFun.   Def ::= O "define" O AtomT [AtomT] C [Exp] C;

-- Types

ETypeAtom.  TType      ::= AtomT;
ETypeFun.   TType      ::= TTypeFun;

ETypeList.    TTypeList  ::= O [TType] C;
ETypeFunDecl. TTypeFun   ::= O TTypeList TType C; 

terminator Exp "";
terminator Def "";
terminator AtomT "";
terminator Bind "";
terminator TType "";

position token AtomT ((["!$%&|*+-/:<=>?@^_~#"]|letter)(["!$%&|*+-/:<=>?@^_~#"]|letter|digit)* );

position token O '(';
position token C ')';
position token QuoT '\'';

comment ";"

