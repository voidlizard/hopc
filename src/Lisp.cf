
TopLevel. TopLevel ::= [Exp] ;

EUnit.   Exp ::= O C ;
EStr.    Exp ::= String  ;
EInt.    Exp ::= Integer ;
EAtom.   Exp ::= AtomT ;
-- EList.   Exp ::= QuoT O [Exp] C;
ELet.    Exp ::= O "let" O AtomT Exp C Exp C;
ELetM.   Exp ::= O "let" O [Bind] C Exp C ;
ELambda. Exp ::= O "lambda" O [AtomT] C Exp C;
EApply.  Exp ::= O Exp [Exp] C;
EBegin.  Exp ::= O "begin" [Exp] C;
ECond.   Exp ::= O "if" Exp Exp Exp C;

EMacroT.  Exp ::= TypeVar;

EBind.   Bind ::= O AtomT Exp C;
EDef.    Exp  ::= Def;

DefExp.  Def ::= O "define" AtomT Exp C;
DeFun.   Def ::= O "define" O AtomT [AtomT] C [Exp] C;

-- Types

ETypeFunForeign. TypeVar ::= O "$" "deftype" O "foreign" String O AtomT [AtomT] C AtomT C "$" C ;
ETypeFun.        TypeVar ::= O "$" "deftype" O O AtomT [AtomT] C AtomT C "$" C ;
ETypeVar.        TypeVar ::= O "$" "deftype" O AtomT AtomT C "$" C;

terminator Exp "";
terminator Def "";
terminator AtomT "";
terminator Bind "";

position token AtomT ((["!$%&|*+-/:<=>?@^_~#"]|letter)(["!$%&|*+-/:<=>?@^_~#"]|letter|digit)* );

position token O '(';
position token C ')';
position token QuoT '\'';

comment ";"

